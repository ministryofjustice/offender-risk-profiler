version: 2.1
commands:
  setup:
    description: "Install tools and configure kubectl"
    steps:
      - aws-cli/install
      - kubernetes/install
      - helm/install-helm-client:
          version: v2.13.1
      - run:
          name: Setup kubectl
          command: |
            echo -n "${KUBE_ENV_CACERT}" | base64 -d > /tmp/cluster_ca.crt
            kubectl config set-cluster "${KUBE_ENV_NAME}" \
              --certificate-authority="/tmp/cluster_ca.crt" \
              --server="https://api.${KUBE_ENV_NAME}"
            kubectl config set-credentials circleci \
              --token="${KUBE_ENV_TOKEN}"
            kubectl config set-context circleci \
              --cluster="${KUBE_ENV_NAME}" \
              --user="circleci" \
              --namespace="${KUBE_ENV_NAMESPACE}"
            # confirm setup is ok
            kubectl config use-context circleci
  deploy_to_env:
    parameters:
      env:
        type: string
    steps:
      - setup
      - checkout:
          path: ~/git
      - attach_workspace:
          at: ~/app
      - deploy:
          name: Deploy to << parameters.env >>
          command: |
            APP_VERSION=$(cat ~/app/app_version.txt)
            aws secretsmanager get-secret-value --secret-id ${AWS_SECRET_NAME} | jq -r .SecretString | \
            helm upgrade offender-risk-profiler ~/git/helm_deploy/offender-risk-profiler/. \
              --install --wait --force --reset-values --timeout 360 \
              --tiller-namespace=${KUBE_ENV_NAMESPACE} \
              --namespace=${KUBE_ENV_NAMESPACE} \
              --description="${APP_VERSION} - ${CIRCLE_BUILD_URL}" \
              --values ~/git/helm_deploy/values-<< parameters.env >>.yaml \
              --values - \
              --set image.tag="${APP_VERSION}"
executors:
  deployer:
    docker:
      - image: circleci/python:3
    working_directory: ~/app
  builder:  
    docker:
      - image: circleci/openjdk:11-jdk-browsers
    working_directory: ~/app

orbs:
  aws-cli: circleci/aws-cli@0.1.13
  kubernetes: circleci/kubernetes@0.3.0
  helm: circleci/helm@0.1.2
  owasp: entur/owasp@0.0.6

jobs:
  build:
    executor: builder
    steps:
      - checkout
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle" }}
            - gradle-
      - run: ./gradlew build
      - run:
          name: Record the Application Version
          command: |
            jar xvf build/libs/offender-risk-profiler-*.jar BOOT-INF/classes/META-INF/build-info.properties
            APP_VERSION=$(grep 'build.version=' BOOT-INF/classes/META-INF/build-info.properties | awk -F= '{print $2}')
            rm BOOT-INF/classes/META-INF/build-info.properties

            # make up a good version name
            TAG=${APP_VERSION}.${CIRCLE_BRANCH}
            if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
              TAG=${APP_VERSION}
            fi
            echo $TAG > ./app_version.txt

      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle" }}
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/reports/tests
      - persist_to_workspace:
          root: .
          paths:
            - build/libs
            - build.gradle
            - app_version.txt

  build_docker:
    executor: deployer
    steps:
      - checkout
      - attach_workspace:
          at: ~/app
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build container and publish to docker hub
          command: |
            APP_VERSION=$(cat ./app_version.txt)
            docker build --rm=false . \
               --tag "mojdigitalstudio/offender-risk-profiler:$APP_VERSION" \
               --label "maintainer=jamie.draper@digital.justice.gov.uk" \
               --label "app.version=$APP_VERSION" \
               --label "build.version=$APP_VERSION" \
               --label "build.number=$CIRCLE_BUILD_NUM" \
               --label "build.url=$CIRCLE_BUILD_URL" \
               --label "build.gitref=$CIRCLE_SHA1"

            if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
              # publish to docker hub as the tag
             docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
             docker tag mojdigitalstudio/offender-risk-profiler:$APP_VERSION mojdigitalstudio/offender-risk-profiler:latest
             docker push mojdigitalstudio/offender-risk-profiler:$APP_VERSION
             docker push mojdigitalstudio/offender-risk-profiler:latest
            fi

  deploy_dev:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "dev"
  deploy_preprod:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "preprod"
  deploy_prod:
    executor: deployer
    steps:
      - deploy_to_env:
          env: "prod"

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build:
          filters:
            tags:
              ignore: /.*/
      - build_docker:
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy_dev:
          requires:
            - build_docker
      - request-preprod-approval:
          type: approval
          requires:
            - deploy_dev
      - deploy_preprod:
          context: offender-risk-profiler-preprod
          requires:
            - request-preprod-approval
      - request-prod-approval:
          type: approval
          requires:
            - deploy_preprod
      - deploy_prod:
          context: offender-risk-profiler-prod
          requires:
            - request-prod-approval
  scheduled:
    triggers:
      - schedule:
          cron: "0 7 * * 1-5"
          filters:
            branches:
              only:
                - master
    jobs:
      - owasp/gradle_owasp_dependency_check:
          executor: builder
